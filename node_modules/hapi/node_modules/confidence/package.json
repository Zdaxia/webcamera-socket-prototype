{
  "name": "confidence",
  "description": "Configuration API",
  "version": "0.8.1",
  "author": {
    "name": "Eran Hammer",
    "email": "eran@hueniverse.com",
    "url": "http://hueniverse.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/spumko/confidence"
  },
  "main": "index",
  "keywords": [
    "hapi",
    "plugin",
    "configuration",
    "api"
  ],
  "engines": {
    "node": "0.10.x"
  },
  "dependencies": {
    "hoek": "1.x.x",
    "boom": "1.x.x"
  },
  "devDependencies": {
    "lab": "0.x.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/spumko/confidence/raw/master/LICENSE"
    }
  ],
  "readme": "<a href=\"https://github.com/spumko\"><img src=\"https://raw.github.com/spumko/spumko/master/images/from.png\" align=\"right\" /></a>\n![confidence Logo](https://raw.github.com/spumko/con/master/images/confidence.png)\n\n**Confidence** is a configuration document format, an API, and a foundation for A/B testing. The configuration format is designed to\nwork with any existing JSON-based configuration, serving values based on object path (`'/a/b/c'` translates to ``a.b.c``). In addition,\n**confidence** defines special $-prefixed keys used to filter values for a given criteria.\n\n[![Build Status](https://secure.travis-ci.org/spumko/confidence.png)](http://travis-ci.org/spumko/confidence)\n\n- [Example](#example)\n- [Document Format](#document-format)\n    - [Basic Structure](#basic-structure)\n    - [Filters](#filters)\n    - [Ranges](#ranges)\n    - [Metadata](#metadata)\n- [API](#api)\n\n# Example\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": {\n        \"$filter\": \"env\",\n        \"production\": {\n            \"deeper\": {\n                \"$value\": \"value\"\n            }\n        },\n        \"$default\": {\n            \"$filter\": \"platform\",\n            \"android\": 0,\n            \"ios\": 1,\n            \"$default\": 2\n        }\n    },\n    \"key3\": {\n        \"sub1\": 123,\n        \"sub2\": {\n            \"$filter\": \"xfactor\",\n            \"yes\": 6\n        }\n    },\n    \"ab\": {\n        \"$filter\": \"random.a\",\n        \"$range\": [\n            { \"limit\": 10, \"value\": 4 },\n            { \"limit\": 20, \"value\": 5 }\n        ],\n        \"$default\": 6\n    },\n    \"$meta\": {\n        \"description\": \"example file\"\n    }\n}\n```\n\nWithout any criteria applied, the above configuration document will result in the following:\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": 2,\n    \"key3\": {\n        \"sub1\": 123\n    },\n    \"ab\": 6\n}\n```\n\nWith the following criteria applied:\n\n```json\n{\n    \"env\": \"production\",\n    \"platform\": \"ios\",\n    \"xfactor\": \"yes\",\n    \"random\": {\n        \"1\": 15\n    }\n}\n```\n\nThe result is:\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": {\n        \"deeper\": \"value\"\n    },\n    \"key3\": {\n        \"sub1\": 123,\n        \"sub2\": 6\n    },\n    \"ab\": 5\n}\n```\n\n# Document Format\n\n**Confidence** builds on top of a Javascript object as its document.\n\n### Basic structure\n\nThe configuration document starts with a simple object. key names can only contain alphanumeric characters and '_' with the '$' prefix reserved\nfor special directives. Values can contain any non-object value (e.g. strings, numbers, booleans) as well as arrays.\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": 2\n}\n```\n\nKeys can have children:\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": 2,\n    \"key3\": {\n        \"sub1\": 123\n    }\n}\n```\n\n### Filters\n\nA key can have multiple values based on a filter. The filter is a key provided in a criteria object as the time of retrieval. Filter names can only\ncontain alphanumeric characters and '_'.\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": {\n        \"$filter\": \"env\",\n        \"production\": 1\n    }\n}\n```\n\nWhen asking for `'/key2'`, if no criteria set is provided or the criteria set does not include a value for the `'env'` filter, no value is available. Only when a criteria\nset with a key `'env'` and value `'production'` is provided, the value returned is `1`.\n\nFiltes can point to a nested value using '.' seperated tokens for accessing child values within the criteria object.\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": {\n        \"$filter\": \"system.env\",\n        \"production\": 1\n    }\n}\n```\n\nFilter can have a default value which will be used is the provided criteria set does not include a value of the filter or if the value does not match.\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": {\n        \"$filter\": \"system.env\",\n        \"production\": 1,\n        \"$default\": 2\n    }\n}\n```\n\n### Ranges\n\nRanges provide a way to filter a value based on numerical buckets. The criteria value must be an integer and it matched against the highest bucket limit it can fit.\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": {\n        \"$filter\": \"system.env\",\n        \"production\": 1,\n        \"$default\": 2\n    },\n    \"key3\": {\n        \"$filter\": \"random.a\",\n        \"$range\": [\n            { \"limit\": 10, \"value\": 4 },\n            { \"limit\": 20, \"value\": 5 }\n        ],\n        \"$default\": 6\n    }\n}\n```\n\nIf the criteria includes a value for `random.a`, that value is matched against the sorted range entries. The criterion value will match the entry with highest limit it\nis still less than or equal the limit of. For example, a criterion value of `5` will return a key value for `'/key3'` of `4`. A criterion value of `15` will return a\nkey value for `'/key3'` of `5`, and a criterion value of `50` will return a key value for `'/key3'` of `6`.\n\n### Metadata\n\nThe configuration file can be annotated with metadata that is ignore (and removed) by the parser. Metadata is useful for human readabe information as well as to\nenable other tools such as configuraiton editors and validators, going beyong the basic parsing specified here.\n\n```json\n{\n    \"key1\": \"abc\",\n    \"key2\": {\n        \"$filter\": \"system.env\",\n        \"production\": 1,\n        \"$default\": 2\n    },\n    \"key3\": {\n        \"$filter\": \"random.a\",\n        \"$range\": [\n            { \"limit\": 10, \"value\": 4 },\n            { \"limit\": 20, \"value\": 5 }\n        ],\n        \"$default\": 6\n    },\n    \"$meta\": {\n        \"anything\": \"really\"\n    }\n}\n```\n\nTo annotate non object values, any value can be wrapped in an object and provided using the `$value` directive.\n\n```json\n{\n    \"key1\": {\n        \"$value\": \"abc\",\n        \"$meta\": \"whatever\"\n    },\n    \"key2\": {\n        \"$filter\": \"system.env\",\n        \"production\": 1,\n        \"$default\": 2\n    },\n    \"key3\": {\n        \"$filter\": \"random.a\",\n        \"$range\": [\n            { \"limit\": 10, \"value\": 4 },\n            { \"limit\": 20, \"value\": 5 }\n        ],\n        \"$default\": 6\n    },\n    \"$meta\": {\n        \"anything\": \"really\"\n    }\n}\n```\n\n# API\n\n## Confidence.Store\n\nThe configuration parser used to load the configuration document and apply criteria to get values based on keys.\n\n### new Store([document])\n\nCreates an empty configuration storage container where:\n\n- `document` - an optional object containing a **confidence** configuration object generated from a parsed JSON document.\n  If the document is invalid, will throw an error. Defaults to `{}`.\n\n```javascript\nvar Confidence = require('confidence');\n\nvar store = new Store();\n```\n\n### store.load(document)\n\nValidates the provided configuration, clears any existing configuration, then loads the configuration where:\n\n- `document` - an object containing a **confidence** configuration object generated from a parsed JSON document.\n  If the document is invlaid, will throw an error.\n\n```javascript\nvar document = {\n    a: 1,\n    b: 2,\n    c: {\n        $filter: 'size',\n        big: 100,\n        small: 1,\n        $default: 50\n    }\n};\n\nstore.load(document);\n```\n\n### store.get(key, [criteria])\n\nRetrieves a value from the configuration document after applying the provided criteria where:\n\n- `key` - the requested key path. All keys must begin with '/'. '/' returns the the entire document.\n- `criteria` - optional object used as criteria for applying filters in the configuration document. Defaults to `{}`.\n\nReturns the value found after applying the criteria. If the key is invalid or not found, returns undefined.\n\n```javascript\nvar value = store.get('/c', { size: 'big' });\n```\n\n### store.meta(key, [criteria])\n\nRetrieves the metadata (if any) from the configuration document after applying the provided criteria where:\n\n- `key` - the requested key path. All keys must begin with '/'. '/' returns the the entire document.\n- `criteria` - optional object used as criteria for applying filters in the configuration document. Defaults to `{}`.\n\nReturns the metadata found after applying the criteria. If the key is invalid or not found, or if no metadata is available, returns undefined.\n\n```javascript\nvar value = store.meta('/c', { size: 'big' });\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spumko/confidence/issues"
  },
  "homepage": "https://github.com/spumko/confidence",
  "_id": "confidence@0.8.1",
  "_shasum": "e20db466064cf82f65c9ce254fc3003db5df1888",
  "_from": "confidence@0.8.x",
  "_resolved": "https://registry.npmjs.org/confidence/-/confidence-0.8.1.tgz"
}
